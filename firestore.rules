/**
 * @fileoverview Firestore Security Rules for CareerCompass application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, quiz responses, and career preferences.
 * Public read access is granted to career paths and quiz questions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user.
 * - /users/{userId}/quiz_responses/{quizResponseId}: Stores quiz responses, accessible only by the user.
 * - /users/{userId}/career_preferences/{careerId}: Stores career preferences, accessible only by the user.
 * - /career_paths/{careerPathId}: Stores career path information, publicly readable.
 * - /quiz_questions/{quizQuestionId}: Stores quiz questions, publicly readable.
 *
 * Key Security Decisions:
 * - User data (profiles, responses, preferences) is strictly controlled by user ownership.
 * - Listing all users is disallowed to prevent information harvesting.
 * - Career paths and quiz questions are publicly readable, assuming they are managed by an admin interface.
 *
 * Denormalization for Authorization:
 * - The /users/{userId}/career_preferences/{careerId} collection leverages the career ID as the document ID to enable efficient lookups.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile with id: 'user123'.
     * @deny (create) - User with UID 'user123' cannot create a profile with id: 'user456'.
     * @allow (get) - User with UID 'user123' can read their profile.
     * @deny (get) - User with UID 'user123' cannot read user 'user456' profile.
     * @allow (update) - User with UID 'user123' can update their profile.
     * @deny (update) - User with UID 'user123' cannot update user 'user456' profile.
     * @allow (delete) - User with UID 'user123' can delete their profile.
     * @deny (delete) - User with UID 'user123' cannot delete user 'user456' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can access their own quiz responses.
     * @path /users/{userId}/quiz_responses/{quizResponseId}
     * @allow (create) - User with UID 'user123' can create a quiz response under their profile.
     * @deny (create) - User with UID 'user123' cannot create a quiz response under user 'user456' profile.
     * @allow (get) - User with UID 'user123' can read their quiz responses.
     * @deny (get) - User with UID 'user123' cannot read quiz responses under user 'user456' profile.
     * @allow (update) - User with UID 'user123' can update their quiz responses.
     * @deny (update) - User with UID 'user123' cannot update quiz responses under user 'user456' profile.
     * @allow (delete) - User with UID 'user123' can delete their quiz responses.
     * @deny (delete) - User with UID 'user123' cannot delete quiz responses under user 'user456' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quiz_responses/{quizResponseId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to career path information.
     * @path /career_paths/{careerPathId}
     * @allow (get) - Any user can read career path information.
     * @allow (list) - Any user can list career path information.
     * @deny (create) - No one can create career path documents through the client.
     * @deny (update) - No one can update career path documents through the client.
     * @deny (delete) - No one can delete career path documents through the client.
     * @principle Grants public read access with restricted write access.
     */
    match /career_paths/{careerPathId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces that only the authenticated user can access their own career preferences.
     * @path /users/{userId}/career_preferences/{careerId}
     * @allow (create) - User with UID 'user123' can create a career preference under their profile.
     * @deny (create) - User with UID 'user123' cannot create a career preference under user 'user456' profile.
     * @allow (get) - User with UID 'user123' can read their career preferences.
     * @deny (get) - User with UID 'user123' cannot read career preferences under user 'user456' profile.
     * @allow (update) - User with UID 'user123' can update their career preferences.
     * @deny (update) - User with UID 'user123' cannot update career preferences under user 'user456' profile.
     * @allow (delete) - User with UID 'user123' can delete their career preferences.
     * @deny (delete) - User with UID 'user123' cannot delete career preferences under user 'user456' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/career_preferences/{careerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == careerId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to quiz questions.
     * @path /quiz_questions/{quizQuestionId}
     * @allow (get) - Any user can read quiz questions.
     * @allow (list) - Any user can list quiz questions.
     * @deny (create) - No one can create quiz questions through the client.
     * @deny (update) - No one can update quiz questions through the client.
     * @deny (delete) - No one can delete quiz questions through the client.
     * @principle Grants public read access with restricted write access.
     */
    match /quiz_questions/{quizQuestionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}