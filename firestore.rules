/**
 * @fileOverview Firestore Security Rules for CareerCompass App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for profile data and quiz responses,
 * while providing public read access to career paths and quiz questions.  User data is isolated
 * under their respective `/users/{userId}` path. All writes are protected by authentication checks
 * to prevent unauthorized modification or deletion of data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Enforces ownership; only the authenticated user
 *   can read/write their own profile.
 * - /users/{userId}/quiz_responses/{quizResponseId}: Stores quiz responses for a specific user.
 *   Enforces ownership; only the authenticated user can read/write their own responses.
 * - /career_paths/{careerPathId}: Stores information about different career paths. Globally readable.
 * - /users/{userId}/career_preferences/{careerPreferenceId}: Stores user's career path preferences. Enforces ownership.
 * - /quiz_questions/{quizQuestionId}: Stores quiz questions. Globally readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Career Paths and Quiz Questions are publicly readable.
 *
 * Denormalization for Authorization:
 * - The path `/users/{userId}/...` implicitly denormalizes the user ID, allowing for simple `isOwner(userId)` checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their own profile.
     * @deny (create, get, update, delete) User with ID 'user456' cannot access user 'user123' profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to quiz responses for a specific user.
     * @path /users/{userId}/quiz_responses/{quizResponseId}
     * @allow (create) User with ID 'user123' can create a quiz response under their profile.
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their own quiz responses.
     * @deny (create, get, update, delete) User with ID 'user456' cannot access user 'user123' quiz responses.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/quiz_responses/{quizResponseId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to career path information.
     * @path /career_paths/{careerPathId}
     * @allow (get, list) Any user can read career path information.
     * @deny (create, update, delete) Only the admin can create, update, or delete career paths.
     * @principle Provides public read access with owner-only writes (assuming admin control).
     */
    match /career_paths/{careerPathId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to user's saved career path preferences.
     * @path /users/{userId}/career_preferences/{careerPreferenceId}
     * @allow (create) User with ID 'user123' can create a career preference under their profile.
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their own career preferences.
     * @deny (create, get, update, delete) User with ID 'user456' cannot access user 'user123' career preferences.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/career_preferences/{careerPreferenceId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to quiz questions.
     * @path /quiz_questions/{quizQuestionId}
     * @allow (get, list) Any user can read quiz questions.
     * @deny (create, update, delete) Only the admin can create, update, or delete quiz questions.
     * @principle Provides public read access with owner-only writes (assuming admin control).
     */
    match /quiz_questions/{quizQuestionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}